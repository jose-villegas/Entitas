//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public GeometryTowersComponentsPositionListenerComponent geometryTowersComponentsPositionListener { get { return (GeometryTowersComponentsPositionListenerComponent)GetComponent(GameComponentsLookup.GeometryTowersComponentsPositionListener); } }
    public bool hasGeometryTowersComponentsPositionListener { get { return HasComponent(GameComponentsLookup.GeometryTowersComponentsPositionListener); } }

    public void AddGeometryTowersComponentsPositionListener(System.Collections.Generic.List<IGeometryTowersComponentsPositionListener> newValue) {
        var index = GameComponentsLookup.GeometryTowersComponentsPositionListener;
        var component = (GeometryTowersComponentsPositionListenerComponent)CreateComponent(index, typeof(GeometryTowersComponentsPositionListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceGeometryTowersComponentsPositionListener(System.Collections.Generic.List<IGeometryTowersComponentsPositionListener> newValue) {
        var index = GameComponentsLookup.GeometryTowersComponentsPositionListener;
        var component = (GeometryTowersComponentsPositionListenerComponent)CreateComponent(index, typeof(GeometryTowersComponentsPositionListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveGeometryTowersComponentsPositionListener() {
        RemoveComponent(GameComponentsLookup.GeometryTowersComponentsPositionListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGeometryTowersComponentsPositionListener;

    public static Entitas.IMatcher<GameEntity> GeometryTowersComponentsPositionListener {
        get {
            if (_matcherGeometryTowersComponentsPositionListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GeometryTowersComponentsPositionListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGeometryTowersComponentsPositionListener = matcher;
            }

            return _matcherGeometryTowersComponentsPositionListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddGeometryTowersComponentsPositionListener(IGeometryTowersComponentsPositionListener value) {
        var listeners = hasGeometryTowersComponentsPositionListener
            ? geometryTowersComponentsPositionListener.value
            : new System.Collections.Generic.List<IGeometryTowersComponentsPositionListener>();
        listeners.Add(value);
        ReplaceGeometryTowersComponentsPositionListener(listeners);
    }

    public void RemoveGeometryTowersComponentsPositionListener(IGeometryTowersComponentsPositionListener value, bool removeComponentWhenEmpty = true) {
        var listeners = geometryTowersComponentsPositionListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveGeometryTowersComponentsPositionListener();
        } else {
            ReplaceGeometryTowersComponentsPositionListener(listeners);
        }
    }
}
